#!/bin/bash

set -xe

export LANG=C LC_ALL=C LC_MESSAGES=C

PATH="/bin:/usr/sbin:/usr/bin"
USER_="integ"
SU="/bin/su $USER_ -c"

procname=$(basename "$0")
lockfile=/var/run/${procname/.sh/}.lock
opwd=`pwd`

# Repository declaration
REPOSITORY=/srv/caliopen.frontend
SERVICE=caliopen.frontend
BRANCH="master"
GITHUB=https://github.com/CaliOpen/caliopen.frontend.git
LOGFILE=/var/log/${REPOSITORY/\/srv\//}.log

COMMAND="node_modules/.bin/ember"
ARGS="serve --port 3000 --live-reload false --environment 'production'"

# Update/install.
# Executed whenever the code changed
function deploy {
    cd ${REPOSITORY}
    # Install updates
    # copy configuration
    cp "$REPOSITORY/integration/nginx/sites-available/frontend" "/etc/nginx/sites-available/caliopen.frontend"
    cp "$REPOSITORY/integration/bin/check-and-restart" /root/check-and-restart-caliopen.frontend && \
        chmod +x /root/check-and-restart-caliopen.frontend

    # Build project
    $SU "cd $REPOSITORY && \
        npm prune && \
        npm i && \
        npm install bower@latest && \
        bower install"

    echo "Restart $SERVICE" | logger -t CALIOPEN_FRONTEND
    service nginx restart
    service pm2-init.sh restart
}

# --- main ---
cd /home/integ

# Check lock file
if [ -e $lockfile ]; then
    echo "Sorry, $0 is already running." | logger -t CALIOPEN_FRONTEND
fi
# Create lock file
trap "rm -f $lockfile; exit" INT TERM EXIT
touch "$lockfile"


# --- repository and service management

if [ ! -d "${REPOSITORY}" ]
then
    echo "Install repository ${GITHUB}" | logger -t CALIOPEN_FRONTEND
    $SU "git clone ${GITHUB} ${REPOSITORY} --branch $BRANCH"
    deploy
    # install pm2 service.
    $SU "pm2 start $COMMAND --name 'frontend' -- $ARGS && pm2 save"
else
    $SU "cd $REPOSITORY ; git fetch origin"
    # Check if remote is ahead
    if [ $(cd $REPOSITORY; git rev-list HEAD...origin/master --count) -ne 0 ]
    then
        echo "Update repository ${GITHUB}" | logger -t CALIOPEN_FRONTEND
        # Code changed on the remote side
        $SU "cd $REPOSITORY ; git reset --hard origin/$BRANCH && git clean --force"
        deploy
    else
        echo "Nothing changed ${GITHUB}" | logger -t CALIOPEN_FRONTEND
    fi
fi


rm -f "$lockfile"
trap - INT TERM EXIT

cd $opwd
exit 0

